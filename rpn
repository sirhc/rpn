#!/usr/bin/perl -T -w
#
# Since I was asked,
# (C) 2014 John H. Robinson, IV <jaqque@gmail.com>
#
# Simple RPN calculator. Accepts the four standard operators (+ - * /),
# some fancier operators (**, &, |, ^),
# and some trig functions (natural log, inverse natural log, sine, cosine, and
# tangent)
# Supports a few common constants (e, pi, and tau)
# Since pi is half right, supports 2pi as well

use strict;
use Scalar::Util qw(looks_like_number);

my @stack=("Stack underflow");
my ($x, $y);
my $eq=0; # the eval below is hard without this.
my @operators=qw{ - + * / ** ^ | & };
my @functions=qw{ abs cos exp int log rand sin sqrt };
my %extra_functions=(
	# http://en.wikipedia.org/wiki/Inverse_trigonometric_functions#Relationships_among_the_inverse_trigonometric_functions
	# from the half-angle formula
	"acos" => '2 * atan2( sqrt( 1 - $x ** 2 ) / ( 1 + $x ), 1 )',
	"asin" => '2 * atan2( $x / ( 1 + sqrt( 1 - $x ** 2 ) ) , 1 )',
	"atan" => 'atan2( $x, 1 )',
	"cot"  => 'cos($x) / sin($x)',
	"csc"  => '1 / sin($x)',
	"sec"  => '1 / cos($x)',
	"tan"  => 'sin($x) / cos($x)',
);
my %constants=(
	"e"   => 2.718281828459045,
	"pi"  => 3.141592653589793,
	"π"   => 3.141592653589793,
	"2pi" => 6.283185307179586,
	"2π"  => 6.283185307179586,
	"tau" => 6.283185307179586,
	"τ"   => 6.283185307179586,
);

my $VERBOSE=0;

if ($#ARGV != -1 && $ARGV[0] eq '-v') {
	$VERBOSE=1;
	shift @ARGV;
}

for (@ARGV) {
	for (split) {
		if (looks_like_number ($_)) {
			m/(.*)/; # We can trust looks_like_number(). I hope.
			push @stack, eval $1;
		}
		elsif ($_ ~~ %constants) {
			print "$_ is $constants{$_}\n" if $VERBOSE;
			push @stack, $constants{$_};
		}
		elsif ($_ ~~ @operators) {
			die "$stack[0]\n" if ($#stack<2); # binary
			m/(.*)/; # We can trust it - it's an array member
			$y=pop @stack;
			$x=pop @stack;
			eval "\$eq = ($x) $1 ($y)";
			print "$x $1 $y = $eq\n" if $VERBOSE;
			push @stack, $eq;
		}
		elsif (m/^swap$/) {
			die "$stack[0]\n" if ($#stack<2); # binary
			$y=pop @stack;
			$x=pop @stack;
			print "swapping $x and $y\n" if $VERBOSE;
			push @stack, ($y, $x);
		}
		elsif ($_ ~~ @functions) {
			die "$stack[0]\n" if ($#stack<1); # unary
			m/(.*)/; # We can trust it - it's an array member
			$x=pop @stack;
			eval "\$eq = $1 $x";
			print "$1($x) = $eq\n" if $VERBOSE;
			push @stack, $eq;
		}
		elsif ($_ ~~ %extra_functions) {
			die "$stack[0]\n" if ($#stack<1); # unary
			m/(.*)/; # We can trust it - it's a hash key
			$x=pop @stack;
			eval "\$eq = $extra_functions{$1}";
			print "$1($x) = $eq\n" if $VERBOSE;
			push @stack, $eq;
		}
		elsif (m/^dupl$/) {
			die "$stack[0]\n" if ($#stack<1); # unary
			$x=pop @stack;
			print "duplicating $x\n" if $VERBOSE;
			push @stack, ($x, $x);
		}
		else {
			die "$_? Really?\n";
		}
	}
}

print "$stack[-1]\n";
